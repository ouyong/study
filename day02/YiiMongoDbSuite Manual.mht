From: =?gb2312?B?08kgV2luZG93cyBJbnRlcm5ldCBFeHBsb3JlciA5ILGjtOY=?=
Subject: YiiMongoDbSuite Manual
Date: Sat, 1 Dec 2012 14:33:15 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CDCFD0.CC6D3A30"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7600.16807

这是 MIME 格式的多方邮件。

------=_NextPart_000_0000_01CDCFD0.CC6D3A30
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" =
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><HTML=20
lang=3D"pl" xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD>
<META content=3D"text/html; charset=3Dutf-8" =
http-equiv=3D"content-type">
<META name=3D"robots" content=3D"all"><TITLE>YiiMongoDbSuite =
Manual</TITLE><LINK=20
rel=3D"stylesheet" type=3D"text/css" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/design/gener=
ic.css"=20
media=3D"all"><LINK rel=3D"stylesheet" type=3D"text/css" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/design/print=
.css"=20
media=3D"print"><!--[if lte IE 6]><link rel=3D"stylesheet" =
href=3D"design/ie.css" type=3D"text/css" /><![endif]--><!--[if IE =
7]><link rel=3D"stylesheet" href=3D"design/ie7.css" type=3D"text/css" =
/><![endif]-->
<SCRIPT type=3D"text/javascript">=0A=
=0A=
  var _gaq =3D _gaq || [];=0A=
  _gaq.push(['_setAccount', 'UA-17148216-2']);=0A=
  _gaq.push(['_trackPageview']);=0A=
=0A=
  (function() {=0A=
    var ga =3D document.createElement('script'); ga.type =3D =
'text/javascript'; ga.async =3D true;=0A=
    ga.src =3D ('https:' =3D=3D document.location.protocol ? =
'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';=0A=
    var s =3D document.getElementsByTagName('script')[0]; =
s.parentNode.insertBefore(ga, s);=0A=
  })();=0A=
=0A=
</SCRIPT>

<META name=3D"GENERATOR" content=3D"MSHTML 9.00.8112.16448"></HEAD>
<BODY>
<DIV id=3D"wrap">
<DIV id=3D"header">
<H1>YiiMongoDbSuite Manual 1.3.6</H1>
<P class=3D"generated">@ 28.01.2011</P>
<P class=3D"location"><A=20
href=3D"http://canni.github.com/YiiMongoDbSuite/index.html"><STRONG>Home =

Page</STRONG></A> =C2=BB <A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html">=
<STRONG>User=20
manual</STRONG></A></P></DIV>
<DIV id=3D"content">
<H1>YiiMongoDbSuite Manual 1.3.6</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TD><STRONG>Copyright =C2=A9 2011 CleverIT</STRONG></TD></TR>
  <TR>
    <TD>Available under the terms of license: GNU Free Documentation =
License=20
      2.1</TD></TR>
  <TR>
    <TD>Generated: 28.01.2011</TD></TR></TBODY></TABLE>
<HR>
</DIV>
<H4 id=3D"toc">Table of Contents</H4>
<UL class=3D"toc">
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:introduction">1.=20
  Introduction</A></LI>
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:changelog">2.=20
  Changelog</A></LI>
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:setup">3.=20
  Setup</A></LI>
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic">4.=20
  Basic Usage</A>
  <UL class=3D"toc">
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_simple-model">4.1.=20
    Simple Model (Document in collection)</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_simple-embedded-document">4.2.=20
    Simple Embeded Document Model</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_embedded-documents">4.3.=20
    Embedded Documents</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays">4.4.=20
    Arrays</A>
    <UL class=3D"toc">
      <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays_simple">4.4.1.=20
      Simple Arrays</A></LI>
      <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays_embedded-documents">4.4.2.=20
      Array of Embedded Documents</A></LI></UL></LI></UL></LI>
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying">5.=20
  Querying</A>
  <UL class=3D"toc">
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying_simple-queries">5.1.=20
    Simple queries</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying_criteria-object">5.2.=20
    The EMongoCriteria Object</A></LI></UL></LI>
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A>
  <UL class=3D"toc">
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_indexing">6.1.=20
    Indexing</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_primary-key">6.2.=20
    Primary Keys</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_named-scopes">6.3.=20
    Named Scopes</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_relations">6.4.=20
    Relations</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_data-provider">6.5.=20
    Data Provider Object</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_write-flags">6.6.=20
    Write Queries Flags</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-update">6.7.=20
    Document Partial Updates</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-batch-update">6.8.=20
    Massive Partial Updates</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_gridfs">6.9.=20
    GridFS</A></LI>
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_soft-models">6.10.=20
    Soft Documents Models</A></LI></UL></LI>
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:gii">7.=20
  Gii Support</A></LI>
  <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:special">8.=20
  Special Topics</A>
  <UL class=3D"toc">
    <LI><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:special_multimodel">8.1.=20
    Multimodel Collections</A></LI></UL></LI></UL>
<DL id=3D"toc:introduction" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>1. Introduction</DT>
  <DD class=3D"next">2. Changelog<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:changelog">Next=20
  =C2=BB</A></DD></DL>=09
<H1>1. Introduction</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>This extension is an almost complete, ActiveRecord like support for =
MongoDB=20
in Yii</P>
<P>It originally started as a fork of <A title=3D"MongoRecord" =
href=3D"http://www.yiiframework.com/extension/mongorecord">MongoRecord</A=
>
extension written by <A title=3D"tyohan" =
href=3D"http://www.yiiframework.com/user/31/">tyohan</A>,
 to fix some major bugs, and add full featured suite for <A =
title=3D"MongoDB"=20
href=3D"http://www.mongodb.org/">MongoDB</A> developers.</P>
<H3>Limitations:</H3>
<UL>
  <LI>The main limitations are only those present in MongoDB itself, =
like the=20
  4MB single document data limit. But That's not a big deal either.</LI>
  <LI>In it's current incarnation, This extension does NOT work with the =
OR=20
  operator. When we get it working we will remove this line and add an=20
  example.</LI></UL>
<H3>Requirements:</H3>
<UL>
  <LI>Yii 1.1.5 is required</LI>
  <LI>MongoDB latest stable is recommended. Untested with older =
versions.</LI>
</UL>
<H3>Known bugs</H3>
<UL>
  <LI>Remember, this is not complete yet. So at this stage, it can have =
some=20
  ;]</LI>
  <LI>If you find any please let me know</LI>
  <LI>As said before, it does not work with the OR operators</LI></UL>
<H3>Resources</H3>
<UL>
  <LI><A href=3D"https://github.com/canni/YiiMongoDbSuite">Project page =
on=20
  GitHub</A></LI>
  <LI><A href=3D"http://www.mongodb.org/display/DOCS/Home">MongoDB=20
  documentation</A></LI>
  <LI><A href=3D"http://canni.github.com/YiiMongoDbSuite">On-Line =
version of this=20
  documentation</A></LI>
  <LI><A href=3D"http://www.php.net/manual/en/book.mongo.php">PHP =
MongoDB Driver=20
  docs</A></LI>
  <LI><A=20
  =
href=3D"http://www.yiiframework.com/doc/guide/1.1/en/database.ar">Standar=
d Yii=20
  ActiveRecord Documentation</A></LI></UL>
<H3>Contribution needed!</H3>
<UL>
  <LI>I'm not English native speaker, need someone who can =
correct/rewrite/write=20
  my documentation and/or PHPDoc's in code</LI>
  <LI>Any help would be great :)</LI>
  <LI>Contact me: darek.krk on a gmail dot com or via GitHub =
PM</LI></UL>
<H3>Big thanks goes to:</H3>
<UL>
  <LI>tyohan: for first inspirations and idea of extension</LI>
  <LI>luckysmack: for big help with testing and documentation</LI>
  <LI>Jose Martinez and Philippe Gaultier, for implementing and sharing =
GridFS=20
  support</LI>
  <LI>Nagy Attila G=C3=A1bor, for big help with new functionality and =
testing</LI></UL>
<DL id=3D"toc:changelog" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>2. Changelog</DT>
  <DD class=3D"prev">1. Introduction<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:introduction">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">3. Setup<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:setup">Next=20
  =C2=BB</A></DD></DL>=09
<H1>2. Changelog</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>This is the <STRONG>1.3.6</STRONG> release</P>
<P>New features in 1.3.6</P>
<UL>
  <LI>Few annoying bugs fixed</LI>
  <LI>Documentation corrects</LI>
  <LI><STRONG>Added <CODE>EMongoPartialDocument</CODE> class, that =
supports=20
  full-featured partial loading of documents from DB</STRONG></LI>
  <LI><STRONG>Added fixtures manager, that can replace the Yii default =
one, and=20
  work with Mongo model</STRONG></LI>
  <LI><STRONG>Ability to do massive <A title=3D"6.8. Massive Partial =
Updates"=20
  =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-batch-update">partial=20
  updates of multiple documents</A></STRONG></LI></UL>
<P>New features in 1.3.5</P>
<UL>
  <LI>A lot of BUGs fixed, improved code readability, better in-code=20
  documentation, better exception handling</LI>
  <LI>Added support for PHP Mongo driver versions below 1.0.5</LI>
  <LI><STRONG>Ability to do <EM>Extreme Efficent</EM> document <A =
title=3D"6.7. Partial updates"=20
  =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-update">partial=20
  updates</A>, that make use of MongoDB <CODE>$set</CODE>=20
  operator/feature</STRONG></LI>
  <LI>Support for partial loading of documents from DB</LI>
  <LI>Improved EEmbeddedArraysBehavior class implementation, with cache=20
  support</LI>
  <LI>Added Gii MongoCRUD <EM>light</EM> template, that will produce one =
index=20
  view instead of two admin/index views pair</LI></UL>
<P>New features in 1.3.4</P>
<UL>
  <LI>Added "Soft" Documents support, soft documents do not have fixed =
attribute=20
  lists, for more info see <A title=3D"6.10. Soft Documents Models" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_soft-models">soft=20
  models section</A></LI>
  <LI>Added support for global temporary folder used by GridFS</LI>
  <LI>Added missing deleteByPk method to =
<CODE>EmongoDocument</CODE></LI>
  <LI>Added support for generating Mongo models from existing SQL =
tables, see <A=20
  title=3D"7. Gii Support" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#h=
:gii:model">Gii=20
  section</A></LI></UL>
<P>New features in 1.3.3</P>
<UL>
  <LI>Ability to set FSync and Safe flag on different scopes, see the <A =
title=3D"6.6. Write Queries Flags"=20
  =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_write-flags">Write=20
  queries flags</A> documentation part</LI>
  <LI><STRONG>Ability to use efficient Cursors instead of raw array, =
returned by=20
  the findAll* methods</STRONG> see <A title=3D"8. Special Topics" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#h=
:special:useCursorFlag">Use=20
  Cursor Flag</A> documentation part</LI></UL>
<P>New features in 1.3.2</P>
<UL>
  <LI>Fixed bug that find* methods don't accept criteria in array =
format</LI>
  <LI>Lazy loading/creating of embedded documents</LI>
  <LI>Little performance boost, save embedded documents configs in =
static=20
  array</LI></UL>
<P>New features in 1.3.1</P>
<UL>
  <LI>Fixed few major bugs in EMongoCriteria class</LI>
  <LI><EM>Bugfixes to criteria object had forced to change the criteria =
object=20
  creation from array, please see the <A title=3D"5.2. The =
EMongoCriteria Object"=20
  =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#h=
:querying_criteria-object:array">updated=20
  doc</A> for it</EM></LI>
  <LI>Fixed bug that in massive assign way, embedded documents always =
used only=20
  safe attributes</LI>
  <LI>Setup of PHPUnit testing framework</LI>
  <LI>Written test cases for EMongoDB class and EMongoCriteria class =
</LI></UL>
<P>New features in 1.3</P>
<UL>
  <LI>MongoDB <A title=3D"6.9. GridFS" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_gridfs">GridFS=20
  feature support</A>, thanks to work of: Jose Martinez and Philippe=20
  Gaultier</LI></UL>
<P>New features in 1.2.3</P>
<UL>
  <LI>Gii CRUD generator, now generates advanced search form in admin =
(like in=20
  regular Yii CRUD generator)</LI>
  <LI>Search form now supports comparsion operators ( &gt; | &lt; | =
&gt;=3D |=20
  &lt;=3D | &lt;&gt; | !=3D | =3D=3D | =3D )</LI>
  <LI>In v1.2.2 all search attributes where treated as a string regex, =
now you=20
  can test numbers to, just juse comparsion operators, example:
  <UL>
    <LI>search for '1234' will try to find a string matching regexp =
/1234/i=20
    (this will not work if field is numeric)</LI>
    <LI>search for '=3D 1234' will try to find numberic value 1234</LI>
    <LI>search for '&gt;=3D 1234' will try to find any record with field =
greater=20
    or equals numeric value 1234 </LI></UL></LI></UL>
<P>New features in 1.2.2</P>
<UL>
  <LI>Magic method search() delivered with every EMongoDocument =
object</LI>
  <LI>Gii CRUD generator now uses search method, to provide text search =
in admin=20
  view (by default using case-insensitive regexp)</LI>
  <LI>EMongoDocument search() method has one parameter:
  <UL>
    <LI>$caseSensitive true|false, default to false, whathever to use=20
    case-sensitive string comparsion </LI></UL></LI></UL>
<P>New features in 1.2.1</P>
<UL>
  <LI><STRONG>Support for <A title=3D"7. Gii Support" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#h=
:gii:crud">generating=20
  CRUD</A> for EMongoDocument models!</STRONG></LI>
  <LI>Few minor bug fixes</LI></UL>
<P>New features in 1.2</P>
<UL>
  <LI>Support for using any other than <A title=3D"6.2. Primary Keys" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#h=
:advanced_primary-key:ownpk">_id=20
  field as a Primary Key</A></LI>
  <LI>Better names scopes handling, support for default scope</LI>
  <LI><EM>Support to have different models in single collection! see <A =
title=3D"8.1. Multimodel Collections"=20
  =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:special_multimodel">Multimodel=20
  collection topic</A></EM></LI>
  <LI>Better memory management, now there is only one collection object=20
  instance, per model</LI></UL>
<P>New features in 1.1</P>
<UL>
  <LI><A title=3D"6.1. Indexing" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_indexing">automated=20
  efficient index</A> definition for collections, per model</LI></UL>
<P>New features in 1.0:</P>
<UL>
  <LI><A title=3D"6.3. Named Scopes" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_named-scopes">Named=20
  scopes</A> just like in AR</LI>
  <LI>Very easy to use <A title=3D"5.2. The EMongoCriteria Object" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying_criteria-object">criteria=20
  object</A>, you don't have to create complex MongoDB query =
arrays!</LI>
  <LI>Better exeption handling</LI>
  <LI>A lot more PHPDocs in code </LI></UL>
<P>Features:</P>
<UL>
  <LI>Support of using Class::model()-&gt;find / findAll / count /=20
  countByAttributes and other Yii ActiveRecord syntax</LI>
  <LI>Support of schema-less documents with Yii standard rules and =
validation=20
  features</LI>
  <LI>Endless Embedded/Nested document support (Embedded documents are =
their own=20
  Model class with their own rules and other methods.</LI>
  <LI>(almost, limited only by MongoDB 4MB limit of single document) =
endless=20
  document embedding/nesting</LI>
  <LI>Ready to go out-of-box <EM>EFFICIENT</EM> DataProvider, witch use =
native=20
  php db driver sort, limit and offset features for returning =
results!</LI>
  <LI>Records and embedded documents inherit from CModel, so you can use =
every=20
  class witch can handle of CModel (ie: Gii form generator)</LI>
  <LI><A title=3D"6.4. Relations" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_relations">relation=20
  support <EM>idea/concept/example</EM></A></LI></UL>
<DL id=3D"toc:setup" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>3. Setup</DT>
  <DD class=3D"prev">2. Changelog<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:changelog">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">4. Basic Usage<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic">Next=20
  =C2=BB</A></DD></DL>=09
<H1>3. Setup</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>In your main configuration file, witch is by default:=20
<CODE>protected/config/main.php</CODE> config file.</P>
<P>Add the following to the file:</P><PRE class=3D"php"><SPAN =
style=3D"color: rgb(0, 0, 255);">'import'</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D&gt;</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, =
255);">'ext.YiiMongoDbSuite.*'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 255);">'components'</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'mongodb'</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'class'</SPAN>            =
 <SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'EMongoDB'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'connectionString'</SPAN> =
 <SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'mongodb://localhost'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'dbName'</SPAN>           =
 <SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'myDatabaseName'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fsyncFlag'</SPAN>        =
 <SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN =
style=3D"color: rgb(0, 153, 0); font-weight: bold;">false</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'safeFlag'</SPAN>         =
 <SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN =
style=3D"color: rgb(0, 153, 0); font-weight: bold;">false</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'useCursor'</SPAN>        =
 <SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN =
style=3D"color: rgb(0, 153, 0); font-weight: bold;">false</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN></PRE>
<UL>
  <LI><CODE>connectionString</CODE>: 'localhost' should be changed to =
the ip or=20
  hostname of your host being connected to. For example if connecting to =
a=20
  server it might be <CODE>'connectionString' =3D&gt;=20
  'mongodb://username@xxx.xx.xx.xx'</CODE> where xx.xx.xx.xx is the ip =
(or=20
  hostname) of your webserver or host.</LI>
  <LI><CODE>dbName</CODE>: is the name you want the collections to be =
stored in.=20
  The database name.</LI>
  <LI><CODE>fsyncFlag</CODE> and <CODE>safeFlag</CODE> - see the <A =
title=3D"6.6. Write Queries Flags"=20
  =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_write-flags">Write=20
  Queries Flags Section</A>,<STRONG>state of this flags has massive =
impact on=20
  behavior of this extension, PLEASE read the linked =
chapter!</STRONG></LI>
  <LI><CODE>useCursor</CODE> flag see <A title=3D"8. Special Topics" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#h=
:special:usecursorflag">Use=20
  cursor special topic</A></LI>
  <LI>For more info see the <A =
href=3D"http://php.net/manual/en/mongo.connecting.php">MongoDB=20
  connection page on php.net</A>.</LI></UL>
<P>That's all you have to do for setup. You can use it very much like =
the active=20
record. Short example:</P><PRE class=3D"php"><SPAN style=3D"color: =
rgb(0, 0, 136);">$client</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">new</SPAN> Client<SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$client</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">first_name</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'something'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$client</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">save</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$clients</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> Client<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN></PRE>
<DL id=3D"toc:basic" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>4. Basic Usage</DT>
  <DD class=3D"prev">3. Setup<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:setup">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">4.1. Simple Model (Document in collection)<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_simple-model">Next=20
  =C2=BB</A></DD></DL>=09
<H1>4. Basic Usage</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>This section shows some basic, quick-start usage examples, follow to =
the next=20
chapters.</P>
<BLOCKQUOTE class=3D"information">
  <P><CODE>EMongoDocument</CODE> and <CODE>EMongoEmbeddedDocument</CODE> =
extends=20
  standard <CODE>CModel</CODE> class, you can do with them all  things =
that can=20
  be done with standard <CODE>CModel</CODE> objects!</P></BLOCKQUOTE>
<DL id=3D"toc:basic_simple-model" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic">4.=20
  Basic Usage</A><BR>4.1. Simple Model (Document in collection)</DT>
  <DD class=3D"prev">4. Basic Usage<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">4.2. Simple Embeded Document Model<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_simple-embedded-document">Next=20
  =C2=BB</A></DD></DL>=09
<H1>4.1. Simple Model (Document in collection)</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>For basic use, just declare simple model, under yours application =
models=20
directory, we will show simple User model that will represent documents =
stored=20
in <CODE>users</CODE> MongoDB collection.</P><PRE class=3D"php"><SPAN =
style=3D"color: rgb(0, 0, 0); font-weight: bold;">class</SPAN> User =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">extends</SPAN> =
EMongoDocument <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// Notice: We extend EMongoDocument class instead of =
CActiveRecord</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$personal_no</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$login</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$first_name</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$last_name</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$email</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 153, 51); font-style: italic;">/**=0A=
     * This method have to be defined in every Model=0A=
     * @return string MongoDB collection name, witch will be used to =
store documents of this model=0A=
     */</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> getCollectionName<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'users'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// We =
can define rules for fields, just like in normal CModel/CActiveRecord =
classes</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> rules<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'login, email, =
personal_no'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'required'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">,</SPAN>=0A=
            <A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'personal_no'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'numeric'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'integerOnly'</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN style=3D"color: =
rgb(0, 153, 0); font-weight: bold;">true</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>=0A=
            <A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'email'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 255);">'email'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
the same with attribute names</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> attributeNames<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, 255);">'email'</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 255);">'E-Mail Address'</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 153, 51); font-style: italic;">/**=0A=
     * This method have to be defined in every model, like with normal =
CActiveRecord=0A=
     */</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> static <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">function</SPAN> model<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN><SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">__CLASS__</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> =
parent<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$classname</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<P>Now we can star using our model, just as normal Yii =
ActiveRecord!</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, =
136);">$user</SPAN> <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">new</SPAN> =
User<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">personal_no</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(204, 102, =
204);">1234</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">login</SPAN> <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'somelogin'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">email</SPAN> <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'email@example.com'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">save</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN> <SPAN style=3D"color: rgb(102, 102, 102); =
font-style: italic;">// This will store document with user data into =
MongoDB collection</SPAN></PRE>
<DL id=3D"toc:basic_simple-embedded-document" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic">4.=20
  Basic Usage</A><BR>4.2. Simple Embeded Document Model</DT>
  <DD class=3D"prev">4.1. Simple Model (Document in collection)<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_simple-model">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">4.3. Embedded Documents<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_embedded-documents">Next=20
  =C2=BB</A></DD></DL>=09
<H1>4.2. Simple Embeded Document Model</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>To fully understand this example please refer to <A title=3D"4.3. =
Embedded Documents"=20
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_embedded-documents">Embedded=20
Documents Models Section</A></P>
<P>To use embedded documents you need to do two steps:</P>
<UL>
  <LI>First create model for embedded document (we will add address as =
embedded=20
  document to User model from previous <A title=3D"4.1. Simple Model" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_simple-model">example</A>=20
  ):</LI></UL><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 153, 51); =
font-style: italic;">/**=0A=
 * Note that we extending EMongoEmbeddedDocument, not regular =
EMongoDocument class=0A=
 * this is for performance reasons, embedded documents do not need to =
have, all=0A=
 * connection, and collection management stuff, this is explained in =
[Embedded Documents Models Section][basic.embeddedDocuments]=0A=
 *=0A=
 * NOTE: You may define regular EMongoDocument as an embedded in another =
one, if you really want to, it will still work=0A=
 */</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">class</SPAN> =
UserAddress <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">extends</SPAN> EMongoEmbeddedDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$apartment</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$house</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$street</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$city</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$zip</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// We =
may define rules for embedded document too</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> rules<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'apartment, house, =
street, city, zip'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'required'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
            <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// ...</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
And attribute names too</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> attributeNames<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN> <SPAN =
style=3D"color: rgb(0, 153, 0);">{</SPAN> <SPAN style=3D"color: rgb(102, =
102, 102); font-style: italic;">/* ... */</SPAN> <SPAN style=3D"color: =
rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
NOTE: for embedded documents we do not define static model method!</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//    =
   we do not define getCollectionName method either.</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<UL>
  <LI>Next we have to define <CODE>embeddedDocuments()</CODE> method in =
model=20
  that will contain embedded document</LI></UL>
<P>Add <CODE>embeddedDocument()</CODE> method to previous =
<CODE>User</CODE>=20
model example:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">class</SPAN> User <SPAN style=3D"color: rgb(0, 0, =
0); font-weight: bold;">extends</SPAN> EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 153, 51); font-style: italic;">/**=0A=
     * This method should return simple array that will define field =
names for embedded=0A=
     * documents, and class to use for them=0A=
     */</SPAN> =0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> embeddedDocuments<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// property field name =3D&gt; class name to use for this =
embedded document</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, 255);">'address'</SPAN> =
<SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'UserAddress'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<P>Now, the fun part starts!</P>
<P>We can now do things like:</P><PRE class=3D"php"><SPAN =
style=3D"color: rgb(0, 0, 136);">$user</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">new</SPAN> User<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">address</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">city</SPAN> =
<SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'New York'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">address</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">street</SPAN> =
<SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'Some street name'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// This =
will save user to users collection, with UserAddress embedded document =
set,</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// and =
this handle with validation of embedded documents too!</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">save</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// After =
that:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> User<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// Models =
will be automatically populated with embedded documents that they =
contain,</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// so we =
can do:</SPAN>=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">address</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">city</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN></PRE>
<DL id=3D"toc:basic_embedded-documents" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic">4.=20
  Basic Usage</A><BR>4.3. Embedded Documents</DT>
  <DD class=3D"prev">4.2. Simple Embeded Document Model<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_simple-embedded-document">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">4.4. Arrays<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays">Next=20
  =C2=BB</A></DD></DL>=09
<H1>4.3. Embedded Documents</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<H2>Basic informations about embedded documents</H2>
<H3 id=3D"h:basic_embedded-documents:mustknow">Must know:</H3>
<UL>
  <LI>For performance reasons all models of embedded documents should =
extend=20
  from <CODE>EMongoEmbeddedDocument</CODE> class</LI>
  <LI>But the above is not a must, things will still work if you define =
as=20
  embedded child classes of regular <CODE>EMongoDocument</CODE></LI>
  <LI>You can define as many embedded documents as you wish</LI>
  <LI>Every embedded document <STRONG>can contain</STRONG> embedded=20
  documents!</LI>
  <LI>The only limit for this mechanism is that serialized version (in =
raw array=20
  format) of whole document, must not extend the 4 MB size</LI>
  <LI>For documents bigger than 4 MB see the <A title=3D"6.9. GridFS" =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_gridfs">GridFS=20
  Section</A></LI>
  <LI>Main difference between <CODE>EMongoDocument</CODE> and=20
  EMongoEmbeddedDocument` is that:
  <UL>
    <LI>EMongoDocument extends from EMongoEmbeddedDocument</LI>
    <LI>EMongoDocument is equipped with all methods needed to save its =
contents=20
    into a MongoDB collection</LI>
    <LI>You cannot call ie <CODE>save()</CODE> method on a=20
    EMongoEmbeddedDocument</LI></UL></LI></UL>
<H3 id=3D"h:basic_embedded-documents:defining">Defining embedded =
documents within=20
document</H3>
<P><STRONG>This applies to EMongoDocument and=20
EMongoEmbeddedDocument</STRONG></P>
<P>Just define the <CODE>embeddedDocuments()</CODE> method in yours =
model class,=20
it should return array of simple key =3D&gt; value pairs.</P>
<UL>
  <LI>Array values are class names that will be used to instantinate =
embedded=20
  documents</LI>
  <LI>Array keys are treated as property names of given embedded =
document class=20
  </LI></UL>
<P>example:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(102, 102, =
102); font-style: italic;">// ...</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// within =
model class</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">public</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">function</SPAN> =
embeddedDocuments<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'address'</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 255);">'UserAddress'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, =
255);">'some_other_field_name'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'AnyEMongoEmbeddedDocumentChildClass'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// this =
will give you access to propeties of model:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">address</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">embeddedExampleField</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">some_other_field_name</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">embeddedExampleField</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN></PRE>
<H3 id=3D"h:basic_embedded-documents:forcesave">How to force save of =
embedded=20
document into collection</H3>
<UL>
  <LI>First we need to get the mongo collection object ie:
  <UL>
    <LI><CODE>$collection =3D=20
    SomeModelClass::model()-&gt;getCollection();</CODE></LI>
    <LI><CODE>$collection =3D=20
    SomeModelClass::model()-&gt;getDb()-&gt;collectionName;</CODE></LI>
    <LI><CODE>$collection =3D=20
    =
Yii::app()-&gt;getComponent('mongodb')-&gt;getConnection()-&gt;collection=
Name;</CODE></LI>
  </UL></LI>
  <LI>When we have our collection model, we now can force save of =
embedded=20
  document as a regular root document:
  <UL>
    =
<LI><CODE>$collection-&gt;save($ourEmbeddedModel-&gt;toArray());</CODE></=
LI>
  </UL></LI></UL>
<DL id=3D"toc:basic_arrays" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic">4.=20
  Basic Usage</A><BR>4.4. Arrays</DT>
  <DD class=3D"prev">4.3. Embedded Documents<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_embedded-documents">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">4.4.1. Simple Arrays<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays_simple">Next=20
  =C2=BB</A></DD></DL>=09
<H1>4.4. Arrays</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>You can in extreme simple way store any arrays in MongoDB, next =
sections will=20
describe how to get it done.</P>
<DL id=3D"toc:basic_arrays_simple" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays">4.4.=20
  Arrays</A><BR>4.4.1. Simple Arrays</DT>
  <DD class=3D"prev">4.4. Arrays<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">4.4.2. Array of Embedded Documents<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays_embedded-documents">Next=20
  =C2=BB</A></DD></DL>=09
<H1>4.4.1. Simple Arrays</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P><STRONG>Just define a property in yours model, and store an array in =
it! YES=20
This is that simple</STRONG></P>
<P>Example:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">class</SPAN> User <SPAN style=3D"color: rgb(0, 0, =
0); font-weight: bold;">extends</SPAN> EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$myArray</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$myArray</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'our'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 255);">'simple'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'example'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'array'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> User<SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">myArray</SPAN> <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 136);">$myArray</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">save</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// that's =
it!</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// in any =
time after when you get yours model form DB</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> User<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">myArray</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">[</SPAN>1<SPAN =
style=3D"color: rgb(0, 153, 0);">]</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// will =
return 'simple' </SPAN></PRE>
<DL id=3D"toc:basic_arrays_embedded-documents" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays">4.4.=20
  Arrays</A><BR>4.4.2. Array of Embedded Documents</DT>
  <DD class=3D"prev">4.4.1. Simple Arrays<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays_simple">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">5. Querying<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying">Next=20
  =C2=BB</A></DD></DL>=09
<H1>4.4.2. Array of Embedded Documents</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P><EM>There is no way (that I know) where I can easily provide =
mechanism for=20
this, you have to write Your own</EM></P>
<P>This is how I accomplish it for now.</P>
<P>Within suite package you should have and <CODE>extra</CODE> folder =
that=20
contains (not only)<CODE>EEmbeddedArraysBehavior</CODE> class, we can =
use it to=20
store an arrays of embedded documents.</P>
<P>Example:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">class</SPAN> User <SPAN style=3D"color: rgb(0, 0, =
0); font-weight: bold;">extends</SPAN> EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
Add property for storing array</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$addresses</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
Add EEmbeddedArraysBehavior</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> behaviors<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, =
255);">'embeddedArrays'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN>=0A=
                <SPAN style=3D"color: rgb(0, 0, =
255);">'class'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'ext.YiiMongoDbSuite.extra.EEmbeddedArraysBehavior'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
                <SPAN style=3D"color: rgb(0, 0, =
255);">'arrayPropertyName'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'addresses'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>       <SPAN style=3D"color: rgb(102, 102, 102); =
font-style: italic;">// name of property, that will be used as an =
array</SPAN>=0A=
                <SPAN style=3D"color: rgb(0, 0, =
255);">'arrayDocClassName'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'ClientAddress'</SPAN>    <SPAN style=3D"color: rgb(102, 102, =
102); font-style: italic;">// class name of embedded documents in =
array</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<P>Now you can use property arrays as an array of embedded =
documents:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, =
136);">$user</SPAN> <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">new</SPAN> =
User<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">addresses</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">[</SPAN>0<SPAN style=3D"color: rgb(0, 153, 0);">]</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> ClientAddress<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">addresses</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">[</SPAN><SPAN style=3D"color: rgb(204, 102, 204);">0</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">]</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">city</SPAN> =
<SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'New York'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">save</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN> <SPAN style=3D"color: rgb(102, 102, 102); =
font-style: italic;">// Behavior will automatically handle of =
validation, saving etc.</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
OR:</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> User<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">foreach</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$user</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">addresses</SPAN> =
<SPAN style=3D"color: rgb(177, 177, 0);">as</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 136);">$userAddress</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 136);">$userAddress</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">city</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<DL id=3D"toc:querying" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>5. Querying</DT>
  <DD class=3D"prev">4.4.2. Array of Embedded Documents<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:basic_arrays_embedded-documents">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">5.1. Simple queries<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying_simple-queries">Next=20
  =C2=BB</A></DD></DL>=09
<H1>5. Querying</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>This is one of the things that makes this extension great. It's very =
easy to=20
query for the objects you want.</P>
<P>This section covers all possibilities of querying the DB for =
results.</P>
<P>Basically this covers usage of <CODE>EMongoCriteria</CODE> =
object.</P>
<DL id=3D"toc:querying_simple-queries" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying">5.=20
  Querying</A><BR>5.1. Simple queries</DT>
  <DD class=3D"prev">5. Querying<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">5.2. The EMongoCriteria Object<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying_criteria-object">Next=20
  =C2=BB</A></DD></DL>=09
<H1>5.1. Simple queries</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>You can use methods that you have used to with standard Yii=20
<CODE>CActiveRecord</CODE>'s</P>
<UL>
  <LI>To find only one first matched document simply call</LI></UL>
<P><CODE>$model =3D ModelClass::model()-&gt;find()</CODE></P>
<UL>
  <LI>To find document that has some arguments set call </LI></UL>
<P><CODE>$model =3D=20
ModelClass::model()-&gt;findByAttributes(array('attributeName'=3D&gt;'att=
ributeValue',=20
'attribute2'=3D&gt;'otherValue'))</CODE></P>
<UL>
  <LI>You can search models by theyre primary key</LI></UL>
<P><CODE>$model =3D ModelClass::model()-&gt;findByPk(new MongoID(/* ...=20
*/))</CODE></P>
<P>To understand PK queries refer to [Primary Keys=20
Section][advanced.primaryKeys]</P>
<UL>
  <LI>All of above methods have the 'All' version, ie: =
<CODE>findAll()</CODE>,=20
  <CODE>findAllByAttributes</CODE></LI>
  <LI>They may return an array of models, or models cursor, we'll cover =
the=20
  cursor later</LI></UL>
<P><STRONG>This is almost the same behavior like standard Yii =
ActiveRecord=20
models, refer to them for a basic idea</STRONG></P>
<DL id=3D"toc:querying_criteria-object" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying">5.=20
  Querying</A><BR>5.2. The EMongoCriteria Object</DT>
  <DD class=3D"prev">5.1. Simple queries<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying_simple-queries">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6. The Advanced Stuff<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">Next=20
  =C2=BB</A></DD></DL>=09
<H1>5.2. The EMongoCriteria Object</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>By default MongoDB requires to build advanced query arrays if you =
want=20
advanced search for documents in DB.</P>
<P>The EMongoCriteria object simplifies process of building this query=20
arrays.</P>
<P>First of all create the object instance: <CODE>$criteria =3D new=20
EMongoCriteria();</CODE></P>
<P>You may define query criteria in three simple ways:</P>
<OL>
  <LI>Simple 'equlas' condition, that is equivalent of SQL: <CODE>WHERE=20
  fieldName =3D 'fieldValue'</CODE>:
  <UL>
    <LI><CODE>$criteria-&gt;fieldName =3D =
'fieldValue';</CODE></LI></UL></LI>
  <LI>By field name call ie. SQL: <CODE>WHERE fieldName &gt; =
1234</CODE>:
  <UL>
    <LI><CODE>$criteria-&gt;fieldName('&gt;', =
1234);</CODE></LI></UL></LI>
  <LI>By addCond method ie. SQL: <CODE>WHERE fieldName &lt;=3D =
1234</CODE>:
  <UL>
    <LI><CODE>$criteria-&gt;addCond('fieldName', '&lt;=3D', =
1234);</CODE></LI>
  </UL></LI></OL>
<P>You can add multiple conditions, using any of the above techniques, =
they will=20
be mixed together.</P>
<P>In addition to above the criteria object has additional special =
methods.</P>
<OL>
  <LI><CODE>limit($value)</CODE> that takes as parameter the query =
results=20
  limit, same as SQL <CODE>LIMIT</CODE> directive</LI>
  <LI><CODE>offset($value)</CODE> that takes as parameter the query =
results=20
  offset to get, same as SQL <CODE>LIMIT</CODE> directive second =
parameter</LI>
  <LI><CODE>sort($fieldName, $sortDirection)</CODE> this will be covered =

  shortly</LI>
  <LI><CODE>select($array)</CODE> this will be covered shortly</LI></OL>
<BLOCKQUOTE class=3D"information">
  <P>If you want to add simple criteria, that will use field name that =
is a=20
  method name from the above list,  you can use the addCond method ie.=20
  <CODE>$criteria-&gt;addCond('limit', '=3D=3D', =
1234);</CODE></P></BLOCKQUOTE>
<H3 id=3D"h:querying_criteria-object:sort">sort EMongoCriteria =
method</H3>
<P>The sort method takes two parameters</P>
<UL>
  <LI>first is a field name, to use for sorting</LI>
  <LI>second is a sort direction, witch may be one of:
  <OL>
    <LI><CODE>EMongoCriteria::SORT_ASC</CODE> for ascending sorting =
(positive=20
    value 1)</LI>
    <LI><CODE>EMongoCriteria::SORT_DESC</CODE> for descending sorting =
(negative=20
    value -1)</LI></OL></LI></UL>
<P>You can call sort method as many times as you wish, the sorting =
criteria will=20
be mixed together.</P>
<H3 id=3D"h:querying_criteria-object:select">select EMongoCriteria =
method</H3>
<P>The select method takes only one argument, array of field names.</P>
<P>By default MongoDB will return all fields from of document, use this =
method=20
to tell mongo that you want only specified field list.</P>
<BLOCKQUOTE class=3D"important">
  <UL>
    <LI>MongoDB regardless of anything, will always return the _id field =
within=20
    result sets</LI>
    <LI>You can call sort method multiple times, all calls will be =
merged using=20
    array_merge function</LI></UL></BLOCKQUOTE>
<H3 id=3D"h:querying_criteria-object:oplist">List of supported =
operators</H3>
<P>List consist of operators and after <CODE>|</CODE> available shortcut =
(if=20
any)</P>
<BLOCKQUOTE class=3D"information">
  <P>Operators are case-insensitive</P></BLOCKQUOTE><PRE><CODE>- =
'greater'   | &gt;=0A=
- 'greaterEq' | &gt;=3D=0A=
- 'less'      | &lt;=0A=
- 'lessEq'    | &lt;=3D=0A=
- 'notEq'     | !=3D, &lt;&gt;=0A=
- 'in'        |=0A=
- 'notIn'     |=0A=
- 'all'       |=0A=
- 'size'      |=0A=
- 'exists'    |=0A=
- 'notExists' |=0A=
- 'type'      | // BSON type see mongodb docs for this=0A=
- 'mod'       | %=0A=
- 'equals'    | =3D=3D=0A=
- 'elemMatch' |=0A=
</CODE></PRE>
<BLOCKQUOTE class=3D"warning">
  <P>the $or operator in newer versions of mongodb does NOT work with =
this=20
  extension yet. We will add it to the list above when it is fixed.</P>
</BLOCKQUOTE>
<P>Newer versions of mongodb will work, just not the $or operator.</P>
<P>For examples and use for how to use these operators effectively, use =
the <A=20
href=3D"http://www.mongodb.org/display/DOCS/Advanced+Queries">MongoDB =
Operators=20
Documentation here</A>.</P>
<H3 id=3D"h:querying_criteria-object:examples">Examples:</H3><PRE =
class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// first you must create a new criteria object</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> EMongoCriteria<SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// find =
the single user with the personal_number =3D=3D 12345</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">personal_number</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'=3D=3D'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> 12345<SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// OR =
like this:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">personal_number</SPAN> <SPAN style=3D"color: rgb(51, =
153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(204, 102, =
204);">12345</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN> =0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$user</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> User<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">model</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">find</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$criteria</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// find =
all users in New York. This will search in the embedded document of =
UserAddress</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">address</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">city</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'=3D=3D'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'New York'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
Or</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">address</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">city</SPAN> =
<SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'New York'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$users</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> User<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// Ok now =
try this. Only active users, only show at most 10 users, and sort by =
first name, descending, and offset by 20 (pagination):</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// note =
the sort syntax. it must have an array value and use the =3D&gt; =
syntax.</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">status</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'=3D=3D'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> 1<SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">limit</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>10<SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">sort</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'firstName'</SPAN> =
<SPAN style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> =
EMongoCriteria<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">SORT_DESC</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">offset</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN>20<SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$users</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> User<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// A more =
advanced case. All users with a personal_number evenly divisible by 10, =
sorted by first name ascending, limit 10 users, offset by 25 users =
(pagination), and remove any address fields from the returned =
result.</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">personal_number</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'%'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(204, 102, 204);">10</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: =
rgb(204, 102, 204);">0</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN> <SPAN =
style=3D"color: rgb(102, 102, 102); font-style: italic;">// modulo =
=3D&gt; personal_number % 10 =3D=3D 0</SPAN>=0A=
    <SPAN style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">sort</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'firstName'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> EMongoCriteria<SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">SORT_ASC</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">limit</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN>10<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">offset</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN>25<SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$users</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> User<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN></PRE>
<H3 id=3D"h:querying_criteria-object:regexp">Regexp / SQL LIKE =
replacement</H3>
<P>You can use native PHP Mongo driver class MongoRegex, to =
query:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); =
font-style: italic;">// Create criteria</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> EMongoCriteria<SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// Find =
all records witch have first name starring on a, b and c, case =
insensitive search</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">first_name</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">new</SPAN> MongoRegex<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'/[abc].*/i'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$clients</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> Client<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$criteria</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// see =
phpdoc for MongoRegex class for more examples</SPAN></PRE>
<H3 id=3D"h:querying_criteria-object:array">Creating criteria object =
from an=20
array:</H3><PRE class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); =
font-style: italic;">// Example criteria</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$array</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'conditions'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
        <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// field name =3D&gt; operator definition</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'FieldName1'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'greaterEq'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(204, 102, =
204);">10</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: =
rgb(102, 102, 102); font-style: italic;">// Or =
'FieldName1'=3D&gt;array('&gt;=3D' =3D&gt; 10)</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'FieldName2'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'in'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(204, 102, =
204);">1</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN =
style=3D"color: rgb(204, 102, 204);">2</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(204, 102, =
204);">3</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'FieldName3'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'exists'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'limit'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN><SPAN style=3D"color: =
rgb(204, 102, 204);">10</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'offset'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN><SPAN style=3D"color: =
rgb(204, 102, 204);">25</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'sort'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'fieldName1'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> EMongoCriteria<SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">SORT_ASC</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'fieldName4'</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN> EMongoCriteria<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">SORT_DESC</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> EMongoCriteria<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$array</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
or</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$clients</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> ClientModel<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 136);">$array</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN></PRE>
<DL id=3D"toc:advanced" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>6. The Advanced Stuff</DT>
  <DD class=3D"prev">5.2. The EMongoCriteria Object<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:querying_criteria-object">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.1. Indexing<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_indexing">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6. The Advanced Stuff</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>YiiMongoDbSuite enables you to do even more fun things!</P>
<DL id=3D"toc:advanced_indexing" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.1. Indexing</DT>
  <DD class=3D"prev">6. The Advanced Stuff<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.2. Primary Keys<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_primary-key">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.1. Indexing</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>Now you can define indexes for yours collections in easy way!</P>
<P>Suite will check for existing of indexes only once, at the first =
class use,=20
(per script-calls) if it not find any of declared indexes it will create =

them</P>
<P>Only thing you need is to define the <CODE>indexes()</CODE> method in =
yours=20
model class, see the example:</P><PRE class=3D"php"><SPAN =
style=3D"color: rgb(0, 0, 0); font-weight: bold;">class</SPAN> Client =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">extends</SPAN> =
EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
....</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> indexes<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// index name is not important, you may write whatever you =
want, just must be unique</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, =
255);">'index1_name'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>array<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
                <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// key array holds list of fields for index</SPAN>=0A=
                <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// you may define multiple keys for index and multikey =
indexes</SPAN>=0A=
                <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// each key must have a sorting direction SORT_ASC or =
SORT_DESC</SPAN>=0A=
                <SPAN style=3D"color: rgb(0, 0, 255);">'key'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
                    <SPAN style=3D"color: rgb(0, 0, =
255);">'field_name'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>EMongoCriteria<SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">SORT_ASC</SPAN>=0A=
                    <SPAN style=3D"color: rgb(0, 0, =
255);">'field_name.embeded_field'</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">=3D&gt;</SPAN>EMongoCriteria<SPAN style=3D"color: rgb(51, =
153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">SORT_DESC</SPAN>=0A=
                <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
&nbsp;=0A=
                <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// unique, if indexed field must be unique, define a unique =
key</SPAN>=0A=
                <SPAN style=3D"color: rgb(0, 0, =
255);">'unique'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>true<SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
....</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<P>If you whant to disable index existing checking on every page load, =
because=20
of perfomance reasons (recomended for production) put=20
<CODE>$this-&gt;ensureIndexes =3D false;</CODE> into yours =
<CODE>init()</CODE>=20
method in model class.</P><PRE class=3D"php"><SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">class</SPAN> Client <SPAN =
style=3D"color: rgb(0, 0, 0); font-weight: bold;">extends</SPAN> =
EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
....</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> init<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 136);">$this</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">ensureIndexes</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">false</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
....</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<DL id=3D"toc:advanced_primary-key" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.2. Primary Keys</DT>
  <DD class=3D"prev">6.1. Indexing<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_indexing">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.3. Named Scopes<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_named-scopes">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.2. Primary Keys</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>By default YiiMongoDbSuite will always use the <CODE>_id</CODE> field =
as a=20
collection primary key.</P>
<BLOCKQUOTE class=3D"information">
  <P>MongoDB itself guarantee that <CODE>_id</CODE> field will be unique =
across=20
  collection.</P></BLOCKQUOTE>
<H2 id=3D"h:advanced_primary-key:_id">The <CODE>_id</CODE> field</H2>
<P>The <CODE>_id</CODE> field in a short is, be default an instance of=20
<CODE>MongoID</CODE> class.</P>
<P>If you will do <CODE>echo $model-&gt;_id</CODE> you will see =
something like:=20
<CODE>'4ced75e1eb4ae8ca44000000'</CODE></P>
<P>This is basically, the textual representation of auto-generated by =
MongoDB=20
_id field.</P>
<P><STRONG>But be aware that MongoID is not a string!</STRONG></P>
<P><EM>This will not find anything!=20
<CODE>$model-&gt;findByPk('4ced75e1eb4ae8ca44000000');</CODE></EM></P>
<P>To find an model with specified ID use:</P>
<P><CODE>$model-&gt;findByPk(new=20
MongoID('4ced75e1eb4ae8ca44000000'));</CODE></P>
<BLOCKQUOTE class=3D"information">
  <H4>You can put <STRONG>any</STRONG> value into an <CODE>_id</CODE> =
field</H4>
  <P>MongoDB will auto populate _id field by MongoID objects =
<STRONG>only=20
  when</STRONG> it is set to <CODE>NULL</CODE></P></BLOCKQUOTE>
<H2 id=3D"h:advanced_primary-key:ownpk">Own defined Primary Key for=20
collection</H2>
<P>You can define a own field to be used as a Primary Key for yours =
collection,=20
see example:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">class</SPAN> Client <SPAN style=3D"color: rgb(0, 0, =
0); font-weight: bold;">extends</SPAN> EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
Define primaryKey method:</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> primaryKey<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'personal_number'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN> <SPAN style=3D"color: =
rgb(102, 102, 102); font-style: italic;">// Model field name, by default =
the _id field is used</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
Now you can:</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
Client::model()-&gt;findByPk(1234); // personal_number =3D=3D 1234</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<DL id=3D"toc:advanced_named-scopes" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.3. Named Scopes</DT>
  <DD class=3D"prev">6.2. Primary Keys<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_primary-key">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.4. Relations<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_relations">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.3. Named Scopes</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>Now you can use AR style named scopes just define scopes method in =
yours=20
model:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">class</SPAN> Client <SPAN style=3D"color: rgb(0, 0, =
0); font-weight: bold;">extends</SPAN> EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
(...)</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> scopes<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, =
255);">'scopeName'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>array<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">/* Array for criteria object creation see Criteria from array =
topic */</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> defaultScope<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, =
255);">'conditions'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>array<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
                <SPAN style=3D"color: rgb(0, 0, =
255);">'active'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>array<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'=3D=3D'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
153, 0); font-weight: bold;">true</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
(...)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// now =
You can:</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// this =
will find only clients that are active (default scope) and clients =
matching 'scopeName'</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$all</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> Client<SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">scopeName</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN></PRE>
<H2 id=3D"h:advanced_named-scopes:pns">Parameterized Named =
Scopes</H2><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">class</SPAN> Client <SPAN style=3D"color: rgb(0, 0, =
0); font-weight: bold;">extends</SPAN> EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
(...)</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> byStatus<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 136);">$status</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 136);">$this</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">getDbCriteria</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">status</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$status</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 136);">$this</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">setDbCriteria</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$criteria</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 136);">$this</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
(...)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// now =
You can:</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// this =
will find only clients that have status set to parameter value:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$all</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> Client<SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">byStatus</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN>1<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN></PRE>
<BLOCKQUOTE class=3D"information">
  <H4>You can chain multiple named scopes</H4>
  <P>example:=20
  =
<CODE>Client::model()-&gt;active()-&gt;byStatus(1)-&gt;findAll();</CODE><=
/P>
</BLOCKQUOTE>
<DL id=3D"toc:advanced_relations" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.4. Relations</DT>
  <DD class=3D"prev">6.3. Named Scopes<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_named-scopes">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.5. Data Provider Object<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_data-provider">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.4. Relations</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<UL>
  <LI>In NoSQL World Relations are not so obvious as in RDBMS</LI>
  <LI>Because NoSQL databases are designed for performance, there is no =
need of=20
  defining something more complex than correct use of find() method and =
indexing=20
  for fetching related records</LI>
  <LI>This is just an <EM>idea/concept/example</EM> you can do things in =
yours=20
  preferred way! this is schema-less world, think different!</LI>
  <LI>MongoDB Documentation has a clean examples and how-to's for =
handling=20
  relations, <EM>please</EM> read them for better understanding of =
relations in=20
  NoSQL world</LI></UL>
<H2 id=3D"h:advanced_relations:hasone">HAS_ONE relation</H2><PRE =
class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// just define method in yours model class (assume we have =
client collection, and address collection in client model</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">public</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">function</SPAN> =
address<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> Address<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findByAttributes</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'attribute_with_client_id'</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$this</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">primaryKey</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<H2 id=3D"h:advanced_relations:belongsto">BELONGS_TO relation</H2><PRE =
class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// define in address model</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">public</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">function</SPAN> =
client<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> Client<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findByPk</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 136);">$this</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">attribute_with_client_id</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<H2 id=3D"h:advanced_relations:hasmany">HAS_MANY relation</H2><PRE =
class=3D"php">&nbsp;=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// assume =
we have clients and orders collection</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// define =
in client:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">public</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">function</SPAN> =
orders<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> Client<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAllByAttributes</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'client_id'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$this</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">primaryKey</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<H2 id=3D"h:advanced_relations:manymany">MANY_MANY relation</H2>
<P>As simple as defining reverse HAS_MANY relation in orders model. You =
can view=20
the Example models for details.</P>
<DL id=3D"toc:advanced_data-provider" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.5. Data Provider Object</DT>
  <DD class=3D"prev">6.4. Relations<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_relations">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.6. Write Queries Flags<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_write-flags">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.5. Data Provider Object</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV><PRE class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); =
font-style: italic;">// basic dataprovider returns whole collection =
(with efficient pagination support out-of-box)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$dp</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">new</SPAN> EMongoDocumentDataProvider<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'modelClassNameOrInstance'</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// data =
provider with query</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$dp</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">new</SPAN> EMongoDocumentDataProvider<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'modelClassNameOrInstance'</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">,</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'conditions'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN><SPAN style=3D"color: =
rgb(102, 102, 102); font-style: italic;">/* query array goes here =
*/</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// data =
provider, enable sorting (needs to be set explicit)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$dp</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">new</SPAN> EMongoDocumentDataProvider<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'modelClassNameOrInstance'</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">,</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">/* =
standard config array */</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'conditions'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(102, =
102, 102); font-style: italic;">/* query array goes here */</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'sort'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'attributes'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// list of sortable attributes</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN></PRE>
<DL id=3D"toc:advanced_write-flags" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.6. Write Queries Flags</DT>
  <DD class=3D"prev">6.5. Data Provider Object<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_data-provider">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.7. Document Partial Updates<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-update">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.6. Write Queries Flags</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<BLOCKQUOTE class=3D"important">
  <H4>Quote from PHP Manual:</H4>
  <H5>"safe"</H5>
  <P>Can be a boolean or integer, defaults to FALSE. If FALSE, the =
program=20
  continues executing without waiting    for a database response. If =
TRUE, the=20
  program will wait for the database response and throw a =
MongoCursorException  =20
   if the write operation did not succeed.</P>
  <P>If you are using replication and the master has changed, using =
"safe" will=20
  make the driver disconnect from    the master, throw and exception, =
and=20
  attempt to find a new master on the next operation (your application =
must   =20
  decide whether or not to retry the operation on the new master).</P>
  <P>If you do not use "safe" with a replica set and the master changes, =
there=20
  will be no way for the driver    to know about the change so it will=20
  continuously and silently fail to write.</P>
  <P>If safe is an integer, will replicate the insert to that many =
machines=20
  before returning success (or throw    an exception if the replication =
times=20
  out, see wtimeout).    This overrides the w variable set on the=20
collection.</P>
  <H5>"fsync"</H5>
  <P>Boolean, defaults to FALSE. Forces the insert to be synced to disk =
before=20
  returning success. If TRUE, a safe    insert is implied and will =
override=20
  setting safe to FALSE.</P></BLOCKQUOTE><!-- # -->
<P>We now can set value for write queries flags FSync and/or Safe on a =
different=20
scopes:</P>
<UL>
  <LI>Global scope, by setting it in EMongoDB component class itself=20
  (required)</LI>
  <LI>Model scope, bu using=20
  <CODE>ModelClass::model()-&gt;setFsyncFlag($flagValue)</CODE> or=20
  <CODE>ModelClass::model()-&gt;setSafeFlag($flagValue)</CODE></LI>
  <LI>Single Model object by using=20
  <CODE>$singleModelObject-&gt;sefFsyncFlag($flag)</CODE> or=20
  <CODE>$singleModelObject-&gt;sefSafeFlag($flag)</CODE></LI></UL>
<BLOCKQUOTE class=3D"important">
  <H4>State of write queries flags is connected</H4>
  <P>Setting FSync to <CODE>TRUE</CODE>, will set Safe flag to =
<CODE>TRUE</CODE>=20
  automatically</P></BLOCKQUOTE>
<P>Now, we may want all DB operations to be synced to disk, and we set =
global=20
FSync flag in MongoDB component config, but we feagure out that, for ie. =
massive=20
temporary models like DB logging objects are not important, and for =
performance
 reasons, we whant to disable FSync for this models only.</P>
<P>We may do so:=20
<CODE>LogModelClass::model()-&gt;setFsyncFlag(false);</CODE></P>
<P>From now on, all LogModelClass objects will be written to DB without =
waiting=20
to filesystem sync.</P>
<P>For user comfort, FSync and Safe flags may be set just for single =
model=20
instance by, <CODE>$singleModelInstance-&gt;setFsyncFlag(false)</CODE>, =
this=20
will not affect any other model instance.</P>
<DL id=3D"toc:advanced_partial-update" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.7. Document Partial Updates</DT>
  <DD class=3D"prev">6.6. Write Queries Flags<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_write-flags">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.8. Massive Partial Updates<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-batch-update">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.7. Document Partial Updates</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>Since the <CODE>v1.3.5</CODE> You can do <EM>partial updates</EM> of=20
documents.</P>
<BLOCKQUOTE class=3D"information">
  <P>Normally this extension, when using =
<CODE>EmongoDocument::save()</CODE>=20
  will always <STRONG>replace</STRONG> all contents of document  in DB =
with the=20
  actual values of fields in Yours <CODE>EMongoDocument</CODE> instance=20
  (including all embedded documents etc.)</P></BLOCKQUOTE>
<P>You can pass to <CODE>EMongoDocument::update()</CODE> method a list =
of=20
attributes for update, this will use an extreme efficient Mongo=20
<CODE>$set</CODE> operator to update only listed fields, see =
example:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, =
136);">$model</SPAN> <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
ModelClass<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN> <SPAN style=3D"color: =
rgb(102, 102, 102); font-style: italic;">// Find some document to work =
with</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// change =
some fields</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">field1</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(204, 102, =
204);">1</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">field2</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'value'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
Optional: run validation, of changed fields:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">validate</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'field1'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 255);">'field2'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// Use =
partial update</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">update</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'field1'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 255);">'field2'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN =
style=3D"color: rgb(0, 153, 0); font-weight: bold;">true</SPAN> <SPAN =
style=3D"color: rgb(102, 102, 102); font-style: italic;">/* &lt;- second =
parameter indicates to use partial update mechanism */</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN></PRE>
<P>And thats it, this will only update those 2 fields, rest in DB will =
not be=20
touched.</P>
<DL id=3D"toc:advanced_partial-batch-update" class=3D"location =
location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.8. Massive Partial Updates</DT>
  <DD class=3D"prev">6.7. Document Partial Updates<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-update">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.9. GridFS<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_gridfs">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.8. Massive Partial Updates</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Philippe Gaultier=20
  <pgaultier@gmail.com></pgaultier@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>Since the <CODE>v1.3.6</CODE> You can perform <EM>partial =
updates</EM> of=20
multiple documents.</P><PRE class=3D"php"><SPAN style=3D"color: rgb(102, =
102, 102); font-style: italic;">// prepare modifiers</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> EMongoModifier<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
replace field1 value with 'new value'</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addModifier</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'field1'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 255);">'set'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'new value'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
increment field2 value by 1</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addModifier</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'field2'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 255);">'inc'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
1<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
prepare search to find documents</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> EMongoCriteria<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'field3'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN><SPAN style=3D"color: rgb(0, =
0, 255);">'=3D=3D'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, 255);">'filtered =
value'</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// update =
all matched documents using the modifiers</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$status</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> ModelClass<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">updateAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$modifier</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 136);">$criteria</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN> </PRE>
<P>And thats it, this will only update those 2 fields (force value of=20
<CODE>field1</CODE> and increment value of <CODE>field2</CODE>)  for all =
the=20
documents having <CODE>field3 =3D=3D 'filtered value'</CODE>, everything =
else in the=20
db will remain untouched.</P>
<HR>

<P>Available modifiers are :</P>
<UL>
  <LI>inc</LI>
  <LI>set</LI>
  <LI>unset</LI>
  <LI>push</LI>
  <LI>pushAll</LI>
  <LI>addToSet</LI>
  <LI>pop</LI>
  <LI>pull</LI>
  <LI>pullAll</LI>
  <LI>rename</LI></UL>
<P>You can find detailed explanation about usage of those modifiers  on =
the=20
original <A title=3D"MongoDB.org" =
href=3D"http://www.mongodb.org/display/DOCS/Updating">MongoDb=20
documentation</A>.</P>
<HR>

<P>EMongoModifier can be defined during creation :</P><PRE =
class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// prepare modifiers</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> EMongoModifier<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
    <A href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, =
0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName1'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'inc'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$incValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName2'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'set'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$targetValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName3'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'unset'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(204, 102, =
204);">1</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName4'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'push'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$pushedValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName5'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'pushAll'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$pushedValue1</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$pushedValue2</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName6'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'addToSet'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$addedValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName7'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'pop'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(204, 102, =
204);">1</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName8'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'pop'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">-</SPAN><SPAN style=3D"color: rgb(204, 102, 204);">1</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName9'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'pull'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$removedValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName10'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'pullAll'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$removedValue1</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$removedValue2</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'fieldName11'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'rename'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$newFieldName</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN></PRE>
<P>, during execution</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, =
0, 136);">$modifier</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">new</SPAN> EMongoModifier<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName1</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, 255);">'inc'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 136);">$incValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName2</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, 255);">'set'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 136);">$targetValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName3</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'unset'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
1<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName4</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, 255);">'push'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 136);">$pushedValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName5</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'pushAll'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<A href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$pushedValue1</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$pushedValue2</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName6</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'addToSet'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$addedValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName7</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, 255);">'pop'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> 1<SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName8</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, 255);">'pop'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">-</SPAN>1<SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName9</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, 255);">'pull'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN style=3D"color: rgb(0, =
0, 136);">$removedValue</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName10</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'pullAll'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<A href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$removedValue1</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$removedValue2</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$modifier</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">addCond</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$fieldName11</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'rename'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 136);">$newFieldName</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">,</SPAN></PRE>
<P>or using the two methods</P>
<DL id=3D"toc:advanced_gridfs" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.9. GridFS</DT>
  <DD class=3D"prev">6.8. Massive Partial Updates<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_partial-batch-update">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">6.10. Soft Documents Models<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_soft-models">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.9. GridFS</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>You can use MongoDB GridFS feature to save big files within MongoDB=20
collections.</P>
<P>The first thing you need to do, it to define model for yours GridFS=20
collection, see example:</P><PRE class=3D"php"><SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">class</SPAN> Image <SPAN =
style=3D"color: rgb(0, 0, 0); font-weight: bold;">extends</SPAN> =
EMongoGridFS=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 51); font-style: italic;">/**=0A=
     * This field is optional, but:=0A=
     * from PHP MongoDB driver manual:=0A=
     *=0A=
     * 'You should be able to use any files created by MongoGridFS with =
any other drivers, and vice versa.=0A=
     * However, some drivers expect that all metadata associated with a =
file be in a "metadata" field.=0A=
     * If you're going to be using other languages, it's a good idea to =
wrap info you might want them=0A=
     * to see in a "metadata" field.'=0A=
     *=0A=
     * @var array $metadata array of additional info/metadata about a =
file=0A=
     */</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$metadata</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
this method should return the collection name for storing files</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> getCollectionName<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'images'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
normal rules method, if you use metadata field, set it as a 'safe' =
attribute</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> rules<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'filename, =
metadata'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN><SPAN =
style=3D"color: rgb(0, 0, 255);">'safe'</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN>=0A=
            <A href=3D"http://www.php.net/array"><SPAN style=3D"color: =
rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'filename'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'required'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 153, 51); font-style: italic;">/**=0A=
     * Just like normal ActiveRecord/EMongoDocument classes=0A=
     */</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> static <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">function</SPAN> model<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN><SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">__CLASS__</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> =
parent<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<BLOCKQUOTE class=3D"important">
  <P>Every EMongoGridFS has a special field "filename", that is =
mandatory!</P>
</BLOCKQUOTE><!-- # -->
<BLOCKQUOTE class=3D"information">
  <P><CODE>EMongoGridFS</CODE> has a feature that holds files in =
temporary=20
  folder, between operations,  it can be set on global level in EMongoDB =
class,=20
  by setting property <CODE>gridFStemporaryFolder</CODE> to some =
dirname,  or on=20
  model/object level by using <CODE>gridFStemporaryFolder()</CODE> =
setter</P>
</BLOCKQUOTE>
<P>This part of documentation is not yet complete, for now, follow usage =

examples:</P><PRE class=3D"php">Yii<SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">import</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'ext.YiiMongoDbSuite.examples.MongoImage'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//create =
a new image</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> MongoImage<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">filename</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'/var/www/myImage.JPG'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">metadata</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'value1'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(204, 102, =
204);">1</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'value2'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">=3D&gt;</SPAN>2<SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$res</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$image</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">save</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$res</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">!=3D=3D</SPAN> <SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">true</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'error saving file'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//find =
image</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MongoImage<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">!</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 0, 136);">$image</SPAN> instanceof =
MongoImage<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'error finding object'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//findall =
images</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$images</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MongoImage<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">!</SPAN><A href=3D"http://www.php.net/is_array"><SPAN =
style=3D"color: rgb(153, 0, 0);">is_array</SPAN></A><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$images</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'error on findall'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//delete =
images</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MongoImage<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$image</SPAN> instanceof MongoImage<SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 136);">$result</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 136);">$image</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">delete</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$result</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">!=3D=3D</SPAN> <SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">true</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'delete notok'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">else</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'no image found to delete'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">//deleteAll images</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$result</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MongoImage<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">deleteAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><A href=3D"http://www.php.net/is_array"><SPAN =
style=3D"color: rgb(153, 0, 0);">is_array</SPAN></A><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$result</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D=3D=3D</SPAN><SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">true</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">' isarray'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><A =
href=3D"http://www.php.net/isset"><SPAN style=3D"color: rgb(153, 0, =
0);">isset</SPAN></A><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 136);">$result</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">[</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'err'</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">]</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN> <SPAN style=3D"color: rgb(51, =
153, 51);">=3D=3D=3D</SPAN> <SPAN style=3D"color: rgb(0, 153, 0); =
font-weight: bold;">true</SPAN> <SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">' error deleting images:'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">.</SPAN><SPAN style=3D"color: rgb(0, =
0, 136);">$result</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">[</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'err'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">]</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">else</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">' elements deleted:'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">.</SPAN><SPAN style=3D"color: rgb(0, =
0, 136);">$result</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">[</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'n'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">]</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">//deletebyPk image</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MongoImage<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$image</SPAN> instanceof MongoImage<SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 136);">$result</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MongoImage<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">deleteByPk</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN>_id<SPAN style=3D"color: =
rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$result</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">!=3D=3D</SPAN> <SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">true</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'error'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">else</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'no image found to delete by =
pk'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//insert =
image and update</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> MongoImage<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">filename</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'/var/www/myImage.JPG'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">metadata</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'value1'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(204, 102, =
204);">1</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'value2'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">=3D&gt;</SPAN>2<SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$res</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$image</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">save</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">filename</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN>  <SPAN style=3D"color: rgb(0, 0, =
255);">'/var/www/myImageUpdated.JPG'</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">metadata</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'value1'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN><SPAN style=3D"color: rgb(204, 102, =
204);">3</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'value2'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">=3D&gt;</SPAN>4<SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$res</SPAN> <SPAN style=3D"color: =
rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$image</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, 0);">save</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$res</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">!=3D=3D</SPAN> <SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">true</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'error updating'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">//MongoGridFSFile functions</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MongoImage<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">//getBytes function</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$bytes</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 136);">$image</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">getBytes</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">//getFilename</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$filename</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 136);">$image</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">getFilename</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">//getSize</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$size</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 136);">$image</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">getSize</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">//write</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$image</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">write</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN></PRE>
<DL id=3D"toc:advanced_soft-models" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced">6.=20
  The Advanced Stuff</A><BR>6.10. Soft Documents Models</DT>
  <DD class=3D"prev">6.9. GridFS<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_gridfs">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">7. Gii Support<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:gii">Next=20
  =C2=BB</A></DD></DL>=09
<H1>6.10. Soft Documents Models</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>Since the 1.3.4 version you can have models, that do not have fixed =
attribute=20
list.</P>
<P>The only thing to get started is to define model that extends from=20
<CODE>EMongoSoftDocument</CODE></P>
<P>Example:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">class</SPAN> MixedModel <SPAN style=3D"color: rgb(0, =
0, 0); font-weight: bold;">extends</SPAN> EMongoSoftDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
You still can define a field(s), that always will be defined</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
like in normal EMongoDocument, but this is optional</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$field</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// As =
always define the getCollectionName() and model() methods !</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> getCollectionName<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'mixed_collection'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> static <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">function</SPAN> model<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN><SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">__CLASS__</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> =
parent<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<P>And thats it! Now you have model class that will handle of any field=20
lists!</P>
<BLOCKQUOTE class=3D"information">
  <P>You still can use all features that are present in=20
  <CODE>EMongoDocument</CODE> because 'EMongoSoftDocument` extends from =
it.</P>
</BLOCKQUOTE>
<H3 id=3D"h:advanced_soft-models:usage">Usage:</H3>
<BLOCKQUOTE class=3D"important">
  <P>You need to init every soft attribute that you want to add to =
model, by=20
  using <CODE>$model-&gt;initSoftAttribute($attributeName)</CODE>.</P>
</BLOCKQUOTE><PRE class=3D"php"><SPAN style=3D"color: rgb(0, 0, =
136);">$model</SPAN> <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">new</SPAN> =
MixedModel<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">initSoftAttribute</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'field1'</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">initSoftAttributes</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><A href=3D"http://www.php.net/array"><SPAN =
style=3D"color: rgb(153, 0, 0);">array</SPAN></A><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'field2'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">,</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 255);">'field3'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">field</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'regularField'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">field1</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'value'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>   =
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//  =
}</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">field2</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'value2'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>  =
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//  } =
soft attributes, only in this model instance</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">field3</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
255);">'value3'</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>  =
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">//  =
}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">save</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// Finder =
will init and populate all soft attributes with values found in =
particular document automatically</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$newModel</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> MixedModel<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">find</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">echo</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 136);">$newModel</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">field3</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN> =
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// will =
print 'value3'</SPAN></PRE>
<DL id=3D"toc:gii" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>7. Gii Support</DT>
  <DD class=3D"prev">6.10. Soft Documents Models<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:advanced_soft-models">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">8. Special Topics<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:special">Next=20
  =C2=BB</A></DD></DL>=09
<H1>7. Gii Support</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<H2 id=3D"h:gii:model">Model generation</H2>
<P>Since version 1.3.4 you can generate mongo document models based on =
existing=20
SQL tables, just enable gii generators provided within package (see =
below) and=20
use <CODE>MongoModel</CODE> generator.</P>
<H2 id=3D"h:gii:crud">CRUD Generation</H2>
<P>Now you can generate CRUD for yours MongoDB Documents! just you have =
to add=20
generator path to yours Gii config</P>
<BLOCKQUOTE class=3D"important">
  <P>By default generated models will use mongo <CODE>_id</CODE> field =
as a=20
  primary key (using MongoId class)  this generator will use different =
field as=20
  a primary key, if you will override <CODE>primaryKey()</CODE> method =
to return=20
   something different than '_id'. Note that generator cannot handle =
with=20
  multifield primary key,</P></BLOCKQUOTE><PRE class=3D"php"><SPAN =
style=3D"color: rgb(102, 102, 102); font-style: italic;">// in yours =
main.php config file:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 255);">'modules'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 255);">'gii'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'class'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 0, 255);">'system.gii.GiiModule'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 255);">'password'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 0, 255);">'yours_password_to_gii'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// add additional generator path</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, =
255);">'generatorPaths'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>array<SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, =
255);">'ext.YiiMongoDbSuite.gii'</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
...</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">,</SPAN>=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// Now =
login to Gii and start using Mongocrud generator !</SPAN></PRE>
<H2 id=3D"h:gii:forms">Forms generation</H2>
<UL>
  <LI>This is a good news, Gii can generate the worst part of developer =
job,=20
  forms for mongo records ;]</LI>
  <LI>When generating a form from mongo record, comment out embedded =
docs array,=20
  or you'll see error about array/object creation</LI>
  <LI>For embedded docs just generate forms in separed way for each =
one</LI></UL>
<DL id=3D"toc:special" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc">Table=20
  of Contents</A><BR>8. Special Topics</DT>
  <DD class=3D"prev">7. Gii Support<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:gii">=C2=AB=20
  Previous</A></DD>
  <DD class=3D"next">8.1. Multimodel Collections<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:special_multimodel">Next=20
  =C2=BB</A></DD></DL>=09
<H1>8. Special Topics</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>This section covers some special topics, that need to bye =
mentioned</P>
<H2 id=3D"h:special:behaviors">Behaviors</H2>
<UL>
  <LI>You can use existing CActiveRecordBehaviors as long as they do not =
mess up=20
  with CActiveRecord explicit stuff (ie. behaviors that add relation =
handling=20
  will fail to work with EMongoDocuments)</LI>
  <LI>Behaviors may extend from EMongoDocumentBehavior class, standard =
AR=20
  behavior class can't use extra events witch are available here=20
  (beforeEmbeddedDocsInit, afterEmbeddedDocsInit, beforeToArray and=20
  afterToArray)</LI></UL>
<H2 id=3D"h:special:performance">Performance</H2>
<UL>
  <LI>By default all save/update/delete operations performed by internal =
command=20
  sets the FSYNC flag to TRUE, this means, all operations will have to =
wait for=20
  a disk sync!</LI>
  <LI>FSYNC in most cases is a good way and do not have massive impact =
on=20
  performance</LI>
  <LI>You may want to disable FSYNC flag when doing massive=20
  imports/updates/models, because it will be <STRONG>horrible</STRONG>=20
  slow!</LI>
  <LI>Fsync can be disabled by setting up fsyncField in EMongoDB =
class</LI></UL>
<H2 id=3D"h:special:usecursorflag">Use Cursor Flag</H2>
<P>Now we can set that all records returned by findAll* methods will =
return=20
EMongoCursor instead of raw array, EMongoCursor implements Iterator =
interface=20
and can be used with ie. foreach loop.</P>
<P>EMongoCursor will instantiate objects in lazy-loading way, only on =
first=20
use.</P>
<P>By default useCursor flag is set to FALSE to keep backwards =
compatibility,=20
note:- <STRONG>Cursor does not implement ArrayAccess interface, because =
offset=20
access to cursor is very ineffective, and pointless</STRONG>- You can =
set=20
useCursor flag in different scopes    - globally in EMongoDB class, by =
setting=20
$useCursor variable    - Per model: =
ModelClass::model()-&gt;setUseCursor(true); =20
  - And per model instance: $modelInstance-&gt;setUseCursor(true);</P>
<H2 id=3D"h:special:masshand">Massive hand operations</H2><PRE =
class=3D"php"><SPAN style=3D"color: rgb(102, 102, 102); font-style: =
italic;">// Example mass insert (you will want to disable fsyncField for =
this:</SPAN>=0A=
<SPAN style=3D"color: rgb(177, 177, 0);">for</SPAN><SPAN style=3D"color: =
rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$i</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN><SPAN =
style=3D"color: rgb(204, 102, 204);">0</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$i</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">&lt;</SPAN><SPAN style=3D"color: rgb(204, 102, =
204);">1000</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN> =
<SPAN style=3D"color: rgb(0, 0, 136);">$i</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">++</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 136);">$c</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> Client<SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 136);">$c</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">personal_number</SPAN> <SPAN style=3D"color: rgb(51, =
153, 51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$i</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 136);">$c</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">validate</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN> <SPAN style=3D"color: =
rgb(102, 102, 102); font-style: italic;">// You can omit this if you =
want</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 136);">$c</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">getCollection</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">insert</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 136);">$c</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">toArray</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, =
153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<DL id=3D"toc:special_multimodel" class=3D"location location-middle">
  <DT><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:special">8.=20
  Special Topics</A><BR>8.1. Multimodel Collections</DT>
  <DD class=3D"prev">8. Special Topics<BR><A =
href=3D"http://canni.github.com/YiiMongoDbSuite/xhtml_single/index.html#t=
oc:special">=C2=AB=20
  Previous</A></DD></DL>=09
<H1>8.1. Multimodel Collections</H1>
<DIV class=3D"tf_reference">
<TABLE>
  <TBODY>
  <TR>
    <TH>Author</TH>
    <TD>Dariusz G=C3=B3recki=20
  <darek.krk@gmail.com></darek.krk@gmail.com></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<P>You can have different models in single collection, example:</P><PRE =
class=3D"php"><SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">class</SPAN> Client <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">extends</SPAN> EMongoDocument=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$first_name</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$second_name</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
define property for finding type</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$type</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// =
and some const for better remember</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">const</SPAN> =
NORMAL_CLIENT <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN =
style=3D"color: rgb(204, 102, 204);">0</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">const</SPAN> =
BUSINESS_CLIENT <SPAN style=3D"color: rgb(51, 153, 51);">=3D</SPAN> =
<SPAN style=3D"color: rgb(204, 102, 204);">1</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> getCollectionName<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 255);">'clients'</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 153, 51); font-style: italic;">/**=0A=
     * We can override the instantiate method to return correct models=0A=
     */</SPAN>=0A=
    protected <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> instantiate<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$attributes</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$attributes</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">[</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'type'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">]</SPAN> <SPAN style=3D"color: rgb(51, =
153, 51);">=3D=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">self</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">NORMAL_CLIENT</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> NormalClient<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0); font-weight: bold;">null</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN> =
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// We =
have to set scenario to null, it will be set, by populateRecord, =
later</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">else</SPAN> <SPAN =
style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$attributes</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">[</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'type'</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">]</SPAN> <SPAN style=3D"color: rgb(51, =
153, 51);">=3D=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">self</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">BUSINESS_CLIENT</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> <SPAN style=3D"color: =
rgb(0, 0, 0); font-weight: bold;">new</SPAN> BusinessClient<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, =
153, 0); font-weight: bold;">null</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
        <SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">initEmbeddedDocuments</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN> <SPAN style=3D"color: =
rgb(102, 102, 102); font-style: italic;">// We have to do it manually =
here!</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">setAttributes</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$attributes</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">,</SPAN> <SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">false</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 0, 136);">$model</SPAN><SPAN style=3D"color: =
rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> static <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">function</SPAN> model<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN><SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">__CLASS__</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> =
parent<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">class</SPAN> =
NormalClient <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">extends</SPAN> Client=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$additionalField</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> defaultScope<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, =
255);">'conditions'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>array<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'type'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'=3D=3D'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">self</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">NORMAL_CLIENT</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> beforeSave<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>parent<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">beforeSave</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, 136);">$this</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">type</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">self</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">NORMAL_CLIENT</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
            <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 153, 0); font-weight: bold;">true</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">else</SPAN> <SPAN =
style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN style=3D"color: =
rgb(0, 153, 0); font-weight: bold;">false</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> static <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">function</SPAN> model<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN><SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">__CLASS__</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> =
parent<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 0); font-weight: bold;">class</SPAN> =
BusinessClient <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">extends</SPAN> Client=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, =
136);">$taxNo</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> defaultScope<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <A =
href=3D"http://www.php.net/array"><SPAN style=3D"color: rgb(153, 0, =
0);">array</SPAN></A><SPAN style=3D"color: rgb(0, 153, 0);">(</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, =
255);">'conditions'</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN>array<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, 255);">'type'</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">=3D&gt;</SPAN>array<SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
255);">'=3D=3D'</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D&gt;</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">self</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">BUSINESS_CLIENT</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">,</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">function</SPAN> beforeSave<SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">if</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">(</SPAN>parent<SPAN style=3D"color: =
rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">beforeSave</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
            <SPAN style=3D"color: rgb(0, 0, 136);">$this</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">type</SPAN> <SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN> <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">self</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">::</SPAN><SPAN style=3D"color: rgb(0, 64, =
0);">BUSINESS_CLIENT</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">;</SPAN>=0A=
            <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN =
style=3D"color: rgb(0, 153, 0); font-weight: bold;">true</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
        <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">else</SPAN> <SPAN =
style=3D"color: rgb(177, 177, 0);">return</SPAN> <SPAN style=3D"color: =
rgb(0, 153, 0); font-weight: bold;">false</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
&nbsp;=0A=
    <SPAN style=3D"color: rgb(0, 0, 0); font-weight: =
bold;">public</SPAN> static <SPAN style=3D"color: rgb(0, 0, 0); =
font-weight: bold;">function</SPAN> model<SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(51, 153, =
51);">=3D</SPAN><SPAN style=3D"color: rgb(0, 153, 0); font-weight: =
bold;">__CLASS__</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">{</SPAN>=0A=
        <SPAN style=3D"color: rgb(177, 177, 0);">return</SPAN> =
parent<SPAN style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN =
style=3D"color: rgb(0, 64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, =
153, 0);">(</SPAN><SPAN style=3D"color: rgb(0, 0, =
136);">$className</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">)</SPAN><SPAN style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
    <SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 153, 0);">}</SPAN></PRE>
<P>Now we can:</P><PRE class=3D"php"><SPAN style=3D"color: rgb(102, 102, =
102); font-style: italic;">// now you can:</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$bclients</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> BuissnessClient<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$clients</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> NormalClient<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(0, 0, 136);">$allClients</SPAN> <SPAN =
style=3D"color: rgb(51, 153, 51);">=3D</SPAN> Client<SPAN =
style=3D"color: rgb(51, 153, 51);">::</SPAN><SPAN style=3D"color: rgb(0, =
64, 0);">model</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">-&gt;</SPAN><SPAN style=3D"color: =
rgb(0, 64, 0);">findAll</SPAN><SPAN style=3D"color: rgb(0, 153, =
0);">(</SPAN><SPAN style=3D"color: rgb(0, 153, 0);">)</SPAN><SPAN =
style=3D"color: rgb(51, 153, 51);">;</SPAN>=0A=
&nbsp;=0A=
<SPAN style=3D"color: rgb(102, 102, 102); font-style: italic;">// but =
they're kept in single collection ! and can be indexed with single field =
etc.</SPAN></PRE></DIV>
<DIV id=3D"footer">
<P>Copyright =C2=A9 <A href=3D"http://www.cleverit.com.pl/">2011 =
CleverIT</A></P>
<P>Available under the terms of license: <A =
href=3D"http://www.gnu.org/licenses/fdl.html">GNU=20
Free Documentation License 2.1</A></P>
<P>Generated by <STRONG>TypeFriendly 0.1.4</STRONG> by <A =
href=3D"http://www.invenzzia.org/">Invenzzia</A></P></DIV>
</DIV></BODY></HTML>

------=_NextPart_000_0000_01CDCFD0.CC6D3A30
Content-Type: application/x-css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://canni.github.com/YiiMongoDbSuite/xhtml_single/design/generic.css

body {
	background: white; color: black;
}
a {
	color: black; text-decoration: none;
}
body {
	margin: 0px; padding: 0px;
}
div {
	margin: 0px; padding: 0px;
}
dl {
	margin: 0px; padding: 0px;
}
dt {
	margin: 0px; padding: 0px;
}
dd {
	margin: 0px; padding: 0px;
}
li {
	margin: 0px; padding: 0px;
}
pre {
	margin: 0px; padding: 0px;
}
form {
	margin: 0px; padding: 0px;
}
fieldset {
	margin: 0px; padding: 0px;
}
input {
	margin: 0px; padding: 0px;
}
textarea {
	margin: 0px; padding: 0px;
}
p {
	margin: 0px; padding: 0px;
}
blockquote {
	margin: 0px; padding: 0px;
}
th {
	margin: 0px; padding: 0px;
}
td {
	margin: 0px; padding: 0px;
}
h1 {
	margin: 0px; padding: 0px; font-size: 100%; font-weight: normal;
}
h2 {
	margin: 0px; padding: 0px; font-size: 100%; font-weight: normal;
}
h3 {
	margin: 0px; padding: 0px; font-size: 100%; font-weight: normal;
}
h4 {
	margin: 0px; padding: 0px; font-size: 100%; font-weight: normal;
}
h5 {
	margin: 0px; padding: 0px; font-size: 100%; font-weight: normal;
}
h6 {
	margin: 0px; padding: 0px; font-size: 100%; font-weight: normal;
}
td {
	margin: 0px; padding: 0px; font-size: 100%; font-weight: normal;
}
address {
	font-style: normal; font-weight: normal;
}
caption {
	font-style: normal; font-weight: normal;
}
cite {
	font-style: normal; font-weight: normal;
}
code {
	font-style: normal; font-weight: normal;
}
dfn {
	font-style: normal; font-weight: normal;
}
var {
	font-style: normal; font-weight: normal;
}
ol {
	list-style: none; margin: 0px; padding: 0px;
}
ul {
	list-style: none; margin: 0px; padding: 0px;
}
pre {
	font-family: inherit; font-size: 100%;
}
code {
	font-family: inherit; font-size: 100%;
}
table {
	border-collapse: collapse; border-spacing: 0;
}
caption {
	text-align: left; font-style: normal; font-weight: normal;
}
th {
	text-align: left; font-style: normal; font-weight: normal;
}
acronym {
	border: 0px currentColor;
}
abbr {
	border: 0px currentColor;
}
fieldset {
	border: 0px currentColor;
}
img {
	border: 0px currentColor;
}
:focus {
	outline: 0px;
}
body {
	background: url("body-bg.gif") repeat-x rgb(212, 222, 192); padding: =
10px; color: rgb(85, 85, 85); font-family: Tahoma, Helvetica, =
sans-serif; font-size: 14px;
}
#wrap {
	background: rgb(255, 255, 255); margin: 0px auto; border: 5px solid =
rgb(196, 214, 159); min-width: 760px; max-width: 1000px;
}
#header {
	background: url("header-h1-bg.gif") repeat-x rgb(213, 241, 156); =
margin: 3px; padding-top: 60px; position: relative;
}
#header h1 {
	top: 0px; right: 10px; color: rgb(94, 111, 44); line-height: 60px; =
font-size: 20pt; font-weight: bold; position: absolute; text-shadow: =
#ffffff 0 0 8px;
}
#header h2 {
	left: 0px; top: 0px; line-height: 60px; letter-spacing: -1px; =
padding-left: 10px; font-size: 16pt; font-weight: normal; position: =
absolute; text-shadow: #ffffff 1px 1px 2px;
}
#header p {
	background: rgb(244, 255, 209); color: rgb(172, 184, 134); line-height: =
25px; padding-left: 10px; font-size: 12px; border-top-color: rgb(255, =
255, 255); border-top-width: 3px; border-top-style: solid;
}
#header p a {
	color: rgb(91, 106, 45);
}
#header p a:hover {
	text-decoration: underline;
}
#header p.generated {
	text-align: right; right: 0px; bottom: 0px; padding-right: 10px; =
font-size: 11px; border-top-width: 1px; position: absolute;
}
#footer {
	background: rgb(238, 244, 218); margin: 3px; padding: 5px 0px; =
text-align: center; color: rgb(145, 151, 127); font-size: 10pt; =
position: relative;
}
#footer a {
	color: rgb(142, 154, 117); font-weight: bold;
}
#footer a:hover {
	text-decoration: underline;
}
#content dl.location {
	border-width: 0px 0px 3px; border-style: solid; border-color: rgb(209, =
241, 193); height: 50px; line-height: 20px; font-weight: bold; =
margin-bottom: 20px; position: relative;
}
#content dl.location a {
	font-weight: normal;
}
#content dl.location dt {
	margin: 0px; padding: 5px 0px; text-align: center; font-size: 14px;
}
#content dl.location dt a {
	display: inline; position: static;
}
#content dl.location dd {
	margin: 0px; padding: 5px 0px; top: 0px; position: absolute;
}
#content dl.location-bottom {
	margin-top: 20px; margin-bottom: 0px; border-top-width: 3px; =
border-bottom-width: 0px;
}
#content dl.location-middle {
	margin: 25px -10px 0px; border-top-width: 3px; border-bottom-width: =
0px; background-color: rgb(224, 255, 188);
}
#content dl.location dd a {
=09
}
#content dl.location dd.prev {
	left: 0px; text-align: left;
}
#content dl.location dd.next {
	text-align: right; right: 0px;
}
#content dl.location-middle dd.prev {
	left: 10px;
}
#content dl.location-middle dd.next {
	right: 10px;
}
#content dl.location hr {
	border-color: rgb(209, 241, 193); height: 3px; color: rgb(209, 241, =
193); display: none; background-color: rgb(209, 241, 193);
}
.kw1 {
	color: rgb(255, 0, 255);
}
.kw2 {
	color: rgb(0, 0, 0); font-weight: bold;
}
.kw3 {
	color: rgb(0, 111, 8);
}
.kw4 {
	color: rgb(246, 51, 51);
}
.co1 {
	color: rgb(128, 128, 128);
}
.co2 {
	color: rgb(128, 128, 128);
}
.coMULTI {
	color: rgb(128, 128, 128);
}
.es0 {
	color: rgb(0, 0, 51);
}
.br0 {
	color: rgb(255, 0, 0);
}
.st0 {
	color: rgb(0, 0, 255);
}
.nu0 {
	color: rgb(255, 255, 0);
}
.me0 {
	color: rgb(0, 102, 0);
}
.sc3 {
	color: rgb(51, 153, 51);
}
.rel {
	color: rgb(255, 0, 0);
}
#content {
	margin: 10px; line-height: 145%; font-size: 14px;
}
#content h1 {
	margin: 10px 0px; color: rgb(46, 87, 39); line-height: 26px; =
letter-spacing: -1px; padding-bottom: 4px; font-family: Arial, =
Helvetica, sans-serif; font-size: 24px; font-weight: bold; =
border-bottom-color: rgb(196, 245, 138); border-bottom-width: 1px; =
border-bottom-style: solid;
}
#content h2 {
	margin: 20px 0px 10px; color: rgb(51, 51, 51); line-height: 22px; =
letter-spacing: -1px; padding-bottom: 2px; font-family: Arial, =
Helvetica, sans-serif; font-size: 20px; font-weight: bold; =
border-bottom-color: rgb(221, 221, 221); border-bottom-width: 1px; =
border-bottom-style: solid;
}
#content h3 {
	margin: 15px 0px 10px; color: rgb(17, 17, 17); line-height: 20px; =
letter-spacing: -1px; padding-bottom: 2px; font-family: Arial, =
Helvetica, sans-serif; font-size: 18px; font-weight: bold; =
border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; =
border-bottom-style: solid;
}
#content h4 {
	margin: 10px 0px; color: rgb(17, 17, 17); line-height: 18px; =
font-family: Arial, Helvetica, sans-serif; font-size: 16px; font-weight: =
bold;
}
#content h5 {
	margin: 10px 0px; color: rgb(17, 17, 17); line-height: 16px; =
font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-weight: =
bold;
}
#content h6 {
	margin: 10px 0px; color: rgb(17, 17, 17); line-height: 14px; =
font-family: Arial, Helvetica, sans-serif; font-size: 12px; font-weight: =
bold;
}
#content h1 a {
	border: currentColor;
}
#content h2 a {
	border: currentColor; color: rgb(51, 51, 51);
}
#content h3 a {
	border: currentColor; color: rgb(51, 51, 51); text-decoration: =
underline;
}
#content p {
	margin: 10px 0px; text-align: justify;
}
#content a {
	color: rgb(102, 153, 0);
}
#content a:hover {
	border-bottom-color: rgb(111, 175, 0); border-bottom-width: 1px; =
border-bottom-style: solid;
}
#content a:hover code {
=09
}
#content hr {
	border: currentColor; height: 1px; color: rgb(68, 68, 68); =
background-color: rgb(68, 68, 68);
}
#content dl {
	margin: 10px 0px;
}
#content dl dt {
	margin: 5px 0px 0px; font-size: 95%; font-weight: bold; position: =
relative;
}
#content dl dt + dt {
	margin: -2px 0px 0px;
}
#content dl dt a {
	border: currentColor; top: -2px; right: 5px; font-weight: bold; =
display: block; position: absolute;
}
#content dl dd {
	background: url("jump.gif") no-repeat 5px 3px; padding-left: 25px; =
margin-left: 0px;
}
#content ul {
	margin: 10px 0px 10px 30px;
}
#content ul.toc {
	list-style: none; margin-left: 20px;
}
#content ol {
	list-style: decimal; margin: 10px 0px 10px 40px;
}
#content code {
	background: rgb(254, 255, 238); padding: 1px 2px;
}
#content div.pre {
=09
}
#content pre {
	background: rgb(244, 244, 244); margin: 10px 0px; padding: 3px 7px; =
letter-spacing: 0px; overflow: auto; white-space: pre-wrap;
}
#content pre code {
	padding: 0px;
}
#content pre.console {
	background: rgb(51, 51, 51); color: rgb(255, 255, 255);
}
#content pre {
	font-family: Consolas, "Lucida Console", "Courier New", courier, =
monospaced; font-size: 100%;
}
#content code {
	font-family: Consolas, "Lucida Console", "Courier New", courier, =
monospaced; font-size: 100%;
}
#content dl dt code {
	font-weight: bold;
}
#content h2 code {
	font-weight: bold;
}
#content h3 code {
	font-weight: bold;
}
#content h4 code {
	font-weight: bold;
}
#content h5 code {
	font-weight: bold;
}
#content h6 code {
	font-weight: bold;
}
#content a[rel=3D'footnote'] {
	padding: 0px 1px; line-height: 100%; font-size: 12px;
}
#content div.footnotes {
	font-size: 13px;
}
#content div.footnotes hr {
	color: rgb(105, 165, 64); background-color: rgb(105, 165, 64);
}
#content div.footnotes li hr {
	color: rgb(68, 68, 68); background-color: rgb(68, 68, 68);
}
#content div.footnotes dl dd {
	background-position: 5px 2px;
}
#content div.footnotes table td {
	font-size: 13px;
}
#content div.footnotes table th {
	font-size: 13px;
}
#content table {
	margin: 10px 0px; width: 100%;
}
#content table caption {
	margin: 0px; text-align: center; line-height: 180%; font-size: 120%; =
font-weight: bold;
}
#content table thead {
=09
}
#content table tbody {
=09
}
#content table tr {
	text-align: center;
}
#content table td {
	padding: 4px 7px; border: 1px solid rgb(153, 153, 153); font-size: =
14px;
}
#content table th {
	padding: 4px 7px; border: 1px solid rgb(153, 153, 153); font-size: =
14px;
}
#content table td {
	background: rgb(255, 255, 255);
}
#content table th {
	background: rgb(228, 247, 189); text-align: center; color: rgb(101, =
121, 38); font-weight: bold;
}
#content blockquote {
	border-width: medium medium medium 3px; border-style: none none none =
solid; border-color: currentColor currentColor currentColor rgb(209, =
241, 193); margin: 10px 5px 10px 10px; padding: 1px 0px 1px 20px;
}
#content blockquote.error {
	background-position: 8px 10px; margin: 10px 0px; padding: 1px 10px 1px =
40px; border: 1px solid rgb(238, 239, 159); background-repeat: =
no-repeat; background-color: rgb(255, 255, 240);
}
#content blockquote.help {
	background-position: 8px 10px; margin: 10px 0px; padding: 1px 10px 1px =
40px; border: 1px solid rgb(238, 239, 159); background-repeat: =
no-repeat; background-color: rgb(255, 255, 240);
}
#content blockquote.important {
	background-position: 8px 10px; margin: 10px 0px; padding: 1px 10px 1px =
40px; border: 1px solid rgb(238, 239, 159); background-repeat: =
no-repeat; background-color: rgb(255, 255, 240);
}
#content blockquote.information {
	background-position: 8px 10px; margin: 10px 0px; padding: 1px 10px 1px =
40px; border: 1px solid rgb(238, 239, 159); background-repeat: =
no-repeat; background-color: rgb(255, 255, 240);
}
#content blockquote.steps {
	background-position: 8px 10px; margin: 10px 0px; padding: 1px 10px 1px =
40px; border: 1px solid rgb(238, 239, 159); background-repeat: =
no-repeat; background-color: rgb(255, 255, 240);
}
#content blockquote.stop {
	background-position: 8px 10px; margin: 10px 0px; padding: 1px 10px 1px =
40px; border: 1px solid rgb(238, 239, 159); background-repeat: =
no-repeat; background-color: rgb(255, 255, 240);
}
#content blockquote.warning {
	background-position: 8px 10px; margin: 10px 0px; padding: 1px 10px 1px =
40px; border: 1px solid rgb(238, 239, 159); background-repeat: =
no-repeat; background-color: rgb(255, 255, 240);
}
#content blockquote.error code {
	background-color: rgb(245, 245, 220);
}
#content blockquote.help code {
	background-color: rgb(245, 245, 220);
}
#content blockquote.important code {
	background-color: rgb(245, 245, 220);
}
#content blockquote.information code {
	background-color: rgb(245, 245, 220);
}
#content blockquote.steps code {
	background-color: rgb(245, 245, 220);
}
#content blockquote.stop code {
	background-color: rgb(245, 245, 220);
}
#content blockquote.warning code {
	background-color: rgb(245, 245, 220);
}
#content blockquote.error {
	background-image: url("icon-error.gif");
}
#content blockquote.help {
	background-image: url("icon-help.gif");
}
#content blockquote.important {
	background-image: url("icon-important.gif");
}
#content blockquote.information {
	background-image: url("icon-information.gif");
}
#content blockquote.steps {
	background-image: url("icon-steps.gif");
}
#content blockquote.stop {
	background-image: url("icon-stop.gif");
}
#content blockquote.warning {
	background-image: url("icon-warning.gif");
}
#content div.tf_reference {
	margin: 10px 0px 20px; font-size: 13px;
}
#content div.tf_reference p {
	margin: 0px;
}
#content div.tf_reference hr {
	display: none;
}
#content div.tf_reference table {
=09
}
#content div.tf_reference table td {
	width: 100%; text-align: left;
}
#content div.tf_reference table th {
	text-align: left; color: rgb(0, 0, 0); white-space: nowrap;
}
#content div.tf_reference table td {
	border-width: 0px 0px 2px; border-color: rgb(238, 238, 238); =
padding-top: 2px; padding-bottom: 2px; font-size: 13px; vertical-align: =
top;
}
#content div.tf_reference table th {
	border-width: 0px 0px 2px; border-color: rgb(238, 238, 238); =
padding-top: 2px; padding-bottom: 2px; font-size: 13px; vertical-align: =
top;
}
#content div.tf_reference dl {
	margin: 0px;
}
#content div.tf_reference dl dt a {
	top: auto; right: auto; font-weight: bold; display: inline; position: =
static;
}
#content div.tf_reference dl dt {
	color: rgb(136, 136, 136);
}
#content div.tf_reference dl dt code {
	color: rgb(68, 68, 68);
}
#content div.tf_reference dl dt small {
=09
}
#content div.tf_reference dl dt {
	margin: 0px;
}

------=_NextPart_000_0000_01CDCFD0.CC6D3A30
Content-Type: application/x-css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://canni.github.com/YiiMongoDbSuite/xhtml_single/design/print.css

body {
	background: rgb(255, 255, 255); color: rgb(0, 0, 0);
}
#wrap {
	border: currentColor; width: auto; min-width: 100%;
}
#header {
	background: rgb(255, 255, 255); padding-bottom: 10px; margin-bottom: =
30px; border-bottom-color: rgb(170, 170, 170); border-bottom-width: 2px; =
border-bottom-style: solid;
}
#header h1 {
	color: rgb(0, 0, 0); text-shadow: none;
}
#header h2 {
	color: rgb(0, 0, 0); text-shadow: none;
}
#header p.generated {
	bottom: 10px; color: rgb(102, 102, 102);
}
#header p {
	background: rgb(250, 250, 250); border: currentColor;
}
#header p a {
	color: rgb(102, 102, 102);
}
#footer {
	background: rgb(255, 255, 255); color: rgb(51, 51, 51); padding-top: =
10px; margin-top: 30px; border-top-color: rgb(170, 170, 170); =
border-top-width: 2px; border-top-style: solid;
}
#footer a {
	color: rgb(0, 0, 0);
}
#content dl.location {
	display: none;
}
#content dl.location-middle {
	display: block; visibility: hidden;
}
#content h1 {
	border-color: rgb(204, 204, 204); color: rgb(0, 0, 0);
}
#content pre.console {
	background: rgb(244, 244, 244); color: rgb(0, 0, 0);
}
#content blockquote {
	border-color: rgb(170, 170, 170);
}
#content table th {
	color: rgb(0, 0, 0); background-color: rgb(238, 238, 238);
}
#content div.footnotes hr {
	color: rgb(68, 68, 68); background-color: rgb(68, 68, 68);
}
#content a {
	color: rgb(62, 91, 34); border-bottom-color: rgb(62, 91, 34); =
border-bottom-width: 1px; border-bottom-style: solid;
}
#content blockquote.error {
	border: 3px solid rgb(238, 239, 159); background-color: rgb(255, 255, =
255);
}
#content blockquote.help {
	border: 3px solid rgb(238, 239, 159); background-color: rgb(255, 255, =
255);
}
#content blockquote.important {
	border: 3px solid rgb(238, 239, 159); background-color: rgb(255, 255, =
255);
}
#content blockquote.information {
	border: 3px solid rgb(238, 239, 159); background-color: rgb(255, 255, =
255);
}
#content blockquote.steps {
	border: 3px solid rgb(238, 239, 159); background-color: rgb(255, 255, =
255);
}
#content blockquote.stop {
	border: 3px solid rgb(238, 239, 159); background-color: rgb(255, 255, =
255);
}
#content blockquote.warning {
	border: 3px solid rgb(238, 239, 159); background-color: rgb(255, 255, =
255);
}

------=_NextPart_000_0000_01CDCFD0.CC6D3A30--
